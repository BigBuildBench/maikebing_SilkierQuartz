{"name":"Silkier  Quartz","tagline":" SilkierQuartz can host jobs  using HostService and   Provide a  web   management tools for Quartz !","body":"\r\n\r\n[![NuGet](https://img.shields.io/nuget/v/SilkierQuartz.svg)](https://www.nuget.org/packages/SilkierQuartz)\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\r\n[![Build status](https://ci.appveyor.com/api/projects/status/0ojmooqvycks11kw?svg=true)](https://ci.appveyor.com/project/MaiKeBing/silkierquartz)\r\n![.NET Core](https://github.com/maikebing/SilkierQuartz/workflows/.NET%20Core/badge.svg?branch=master)\r\n\r\nSilkierQuartz is a new after merging  [Quartzmin](https://github.com/jlucansky/Quartzmin) and  [QuartzHostedService](https://github.com/mukmyash/QuartzHostedService)!\r\n\r\n> [Quartz.NET](https://www.quartz-scheduler.net) is a full-featured, open source job scheduling system that can be used from smallest apps to large scale enterprise systems.\r\n\r\n\r\n> [Quartzmin](https://github.com/jlucansky/Quartzmin) Quartzmin is powerful, easy to use web management tool for Quartz.NET\r\n\r\n>  [QuartzHostedService](https://github.com/mukmyash/QuartzHostedService) QuartzHostedService is easy to host Quartz as service in .Net Core !\r\n\r\n\r\nSo  \r\n\r\nSilkierQuartz can be used within your existing application with minimum effort as a Quartz.NET plugin when it automatically creates embedded web server. Or it can be plugged into your existing OWIN-based web application as a middleware.\r\n\r\n\r\n![Demo](https://raw.githubusercontent.com/jlucansky/public-assets/master/Quartzmin/demo.gif)\r\n\r\nThe goal of this project is to provide convenient tool to utilize most of the functionality that Quartz.NET enables. The biggest challenge was to create a simple yet effective editor of job data map which is heart of Quartz.NET. Every job data map item is strongly typed and SilkierQuartz can be easily extended with a custom editor for your specific type beside standard supported types such as String, Integer, DateTime and so on. \r\n\r\nSilkierQuartz was created with **Semantic UI** and **Handlebars.Net** as the template engine.\r\n\r\n##  SilkierQuartz's Features\r\n  -  automatically discover IJob subclasses with SilkierQuartzAttribute\r\n  -  With QuartzHostedService and more extensions\r\n\r\n\r\n## Quartzmin's Features\r\n- Add, modify jobs and triggers\r\n- Add, modify calendars (Annual, Cron, Daily, Holiday, Monthly, Weekly)\r\n- Change trigger type to Cron, Simple, Calendar Interval or Daily Time Interval\r\n- Set typed job data map values (bool, DateTime, int, float, long, double, decimal, string, byte[])\r\n- Create custom type editor for complex type in job data map\r\n- Manage scheduler state (standby, shutdown)\r\n- Pause and resume job and trigger groups\r\n- Pause and resume triggers individually\r\n- Pause and resume all triggers for specific job\r\n- Trigger specific job immediately\r\n- Watch currently executing jobs\r\n- Interrupt executing job\r\n- See next scheduled dates for Cron\r\n- See recent job history, state and error messages\r\n\r\n## Install\r\nSilkierQuartz is available on [nuget.org](https://www.nuget.org/packages/SilkierQuartz)\r\n\r\nTo install SilkierQuartz, run the following command in the Package Manager Console\r\n```powershell\r\nPM> Install-Package SilkierQuartz\r\n```\r\n## Minimum requirements\r\n \r\n- .NET Core 3.1\r\n  \r\n\r\n### OWIN middleware\r\nAdd to your `Startup.cs` file:\r\n```csharp\r\npublic void Configuration(IAppBuilder app)\r\n{\r\n    app.UseSilkierQuartz(new SilkierQuartzOptions()\r\n    {\r\n        Scheduler = StdSchedulerFactory.GetDefaultScheduler().Result\r\n    });\r\n}\r\n```\r\n\r\n### ASP.NET Core middleware\r\nAdd to your `Program.cs` file:\r\n\r\n```csharp\r\n   public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            CreateHostBuilder(args).Build().Run();\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureWebHostDefaults(webBuilder =>\r\n                {\r\n                    webBuilder.UseStartup<Startup>();\r\n                })\r\n             .ConfigureSilkierQuartzHost();\r\n     }\r\n\r\n```\r\nAdd to your `Startup.cs` file:\r\n```csharp\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddSilkierQuartz();\r\n}\r\n\r\npublic void Configure(IApplicationBuilder app)\r\n{\r\n    app.UseSilkierQuartz(new SilkierQuartzOptions()\r\n                {\r\n                    Scheduler = scheduler,\r\n                    VirtualPathRoot = \"/SilkierQuartz\",\r\n                    UseLocalTime = true,\r\n                    DefaultDateFormat = \"yyyy-MM-dd\",\r\n                    DefaultTimeFormat = \"HH:mm:ss\"\r\n                });\r\n}\r\n```\r\n\r\n## Notes\r\nIn clustered environment, it make more sense to host SilkierQuartz on single dedicated Quartz.NET node in standby mode and implement own `IExecutionHistoryStore` depending on database or ORM framework you typically incorporate. Every clustered Quarz.NET node should be configured with `ExecutionHistoryPlugin` and only dedicated node for management may have `SilkierQuartzPlugin`.\r\n\r\n\r\n## License\r\nThis project is made available under the MIT license. See [LICENSE](LICENSE) for details.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}